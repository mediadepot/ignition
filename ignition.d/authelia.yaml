---
ignition:
  config: {}
  timeouts: {}
networkd: {}
passwd: {}
storage:
  files:
    - filesystem: root
      path: "/opt/mediadepot/systemd/authelia/docker-compose.yml"
      mode: 493 #755
      contents:
        inline: |-
          version: '2'
          services:
            authelia:
              image: authelia/authelia:4.37.2
              volumes:
                - '/opt/mediadepot/authelia/configuration.yml:/config/configuration.yml:ro'
                - '/opt/mediadepot/authelia/data:/etc/authelia/data:rw'
              environment:
                - 'TZ=America/Los_Angeles'
              labels:
                - 'traefik.enable=true'
                - 'traefik.http.services.authelia.loadbalancer.server.port=9091'
                - 'traefik.http.routers.authelia.rule=Host(`login.${DEPOT_DOMAIN_NAME}`)'
                - 'traefik.http.routers.authelia.entrypoints=websecure'
                - 'traefik.http.routers.authelia.tls.certresolver=mydnschallenge'
              networks:
                - traefik
          networks:
            traefik:
              external: true
    - filesystem: root
      path: "/opt/mediadepot/authelia/configuration.yml"
      mode: 493 #755
      contents:
        inline: |-
          ###############################################################
          #                   Authelia configuration                    #
          ###############################################################

          # The host and port to listen on
          host: 0.0.0.0
          port: 9091

          # Level of verbosity for logs: info, debug, trace
          log_level: info

          # The secret used to generate JWT tokens when validating user identity by
          # email confirmation.
          jwt_secret: change_this_secret

          # Default redirection URL
          #
          # If user tries to authenticate without any referer, Authelia
          # does not know where to redirect the user to at the end of the
          # authentication process.
          # This parameter allows you to specify the default redirection
          # URL Authelia will use in such a case.
          #
          # Note: this parameter is optional. If not provided, user won't
          # be redirected upon successful authentication.
          default_redirection_url: http://home.depot.lan/

          # TOTP Issuer Name
          #
          # This will be the issuer name displayed in Google Authenticator
          # See: https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more info on issuer names
          totp:
            issuer: authelia.com

          # Duo Push API
          #
          # Parameters used to contact the Duo API. Those are generated when you protect an application
          # of type "Partner Auth API" in the management panel.
          # duo_api:
          #   hostname: api-123456789.example.com
          #   integration_key: ABCDEF
          #   secret_key: 1234567890abcdefghifjkl

          # The authentication backend to use for verifying user passwords
          # and retrieve information such as email address and groups
          # users belong to.
          #
          # There are two supported backends: `ldap` and `file`.
          authentication_backend:

            # File backend configuration.
            #
            # With this backend, the users database is stored in a file
            # which is updated when users reset their passwords.
            # Therefore, this backend is meant to be used in a dev environment
            # and not in production since it prevents Authelia to be scaled to
            # more than one instance.
            #
            file:
              path: /etc/authelia/data/users_database.yml

          # Access Control
          #
          # Access control is a list of rules defining the authorizations applied for one
          # resource to users or group of users.
          #
          # If 'access_control' is not defined, ACL rules are disabled and the `bypass`
          # rule is applied, i.e., access is allowed to anyone. Otherwise restrictions follow
          # the rules defined.
          #
          # Note: One can use the wildcard * to match any subdomain.
          # It must stand at the beginning of the pattern. (example: *.mydomain.com)
          #
          # Note: You must put patterns containing wildcards between simple quotes for the YAML
          # to be syntactically correct.
          #
          # Definition: A `rule` is an object with the following keys: `domain`, `subject`,
          # `policy` and `resources`.
          #
          # - `domain` defines which domain or set of domains the rule applies to.
          #
          # - `subject` defines the subject to apply authorizations to. This parameter is
          #    optional and matching any user if not provided. If provided, the parameter
          #    represents either a user or a group. It should be of the form 'user:<username>'
          #    or 'group:<groupname>'.
          #
          # - `policy` is the policy to apply to resources. It must be either `bypass`,
          #   `one_factor`, `two_factor` or `deny`.
          #
          # - `resources` is a list of regular expressions that matches a set of resources to
          #    apply the policy to. This parameter is optional and matches any resource if not
          #    provided.
          #
          # Note: the order of the rules is important. The first policy matching
          # (domain, resource, subject) applies.
          access_control:
            # Default policy can either be `bypass`, `one_factor`, `two_factor` or `deny`.
            # It is the policy applied to any resource if there is no policy to be applied
            # to the user.
            default_policy: deny

            rules:
              # Rules applied to everyone
              - domain: home.depot.lan
                policy: bypass

              - domain: "*.depot.lan"
                policy: one_factor

          # Configuration of session cookies
          #
          # The session cookies identify the user once logged in.
          session:
            # The name of the session cookie. (default: authelia_session).
            name: authelia_session

            # The secret to encrypt the session cookie.
            secret: change_this_secret

            # The time in seconds before the cookie expires and session is reset.
            expiration: 3600 # 1 hour

            # The inactivity time in seconds before the session is reset.
            inactivity: 300 # 5 minutes

            # The domain to protect.
            # Note: the authenticator must also be in that domain. If empty, the cookie
            # is restricted to the subdomain of the issuer.
            domain: depot.lan

          # Configuration of the authentication regulation mechanism.
          #
          # This mechanism prevents attackers from brute forcing the first factor.
          # It bans the user if too many attempts are done in a short period of
          # time.
          regulation:
            # The number of failed login attempts before user is banned.
            # Set it to 0 to disable regulation.
            max_retries: 3

            # The time range during which the user can attempt login before being banned.
            # The user is banned if the authentication failed `max_retries` times in a `find_time` seconds window.
            find_time: 120

            # The length of time before a banned user can login again.
            ban_time: 300

          # Configuration of the storage backend used to store data and secrets.
          #
          # You must use only an available configuration: local, sql
          storage:
            # The directory where the DB files will be saved
            local:
              path: /etc/authelia/data/db.sqlite3

          # Configuration of the notification system.
          #
          # Notifications are sent to users when they require a password reset, a u2f
          # registration or a TOTP registration.
          # Use only an available configuration: filesystem, gmail
          notifier:
            # For testing purpose, notifications can be sent in a file
            filesystem:
              filename: /etc/authelia/data/notification.txt

            # Sending an email using a Gmail account is as simple as the next section.
            # You need to create an app password by following: https://support.google.com/accounts/answer/185833?hl=en
            ## smtp:
            ##   username: myaccount@gmail.com
            ##   password: yourapppassword
            ##   sender: admin@example.com
            ##   host: smtp.gmail.com
            ##   port: 587
  directories:
    - filesystem: root
      mode: 493 #755
      path: "/opt/mediadepot/authelia/data"
systemd:
  units:
    - name: authelia.service
      enabled: true
      contents: |-
        [Unit]
        Description=Authelia SSO Auth Container
        After=docker.service depot-env.service
        Requires=docker.service depot-env.service

        [Service]
        Restart=always
        EnvironmentFile=-/etc/sysconfig/mediadepot
        TimeoutStartSec=0
        Restart=always
        WorkingDirectory=/opt/mediadepot/systemd/authelia/
        ExecStartPre=-/usr/bin/docker-compose down -v
        ExecStartPre=-/usr/bin/docker-compose rm -v
        ExecStartPre=-/usr/bin/docker-compose pull
        ExecStart=/usr/bin/docker-compose up
        ExecStop=/usr/bin/docker-compose down -v

        [Install]
        WantedBy=multi-user.target
        WantedBy=docker.service

# REFERENCES
# - https://naumann.dev/books/docker/page/authelia
# - https://github.com/authelia/authelia/issues/407
# - https://www.reddit.com/r/selfhosted/comments/ed1z9e/sso_with_authorization_for_jellyfin_ombi_sonarr/
# - https://www.reddit.com/r/selfhosted/comments/depe4d/traefik_20_and_forwardauth_to_authelia/

